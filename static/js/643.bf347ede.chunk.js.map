{"version":3,"file":"static/js/643.bf347ede.chunk.js","mappings":"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","sources":["components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx"],"sourcesContent":["import { useDispatch } from \"react-redux\";\nimport { login } from \"../../redux/auth/operations\";\nimport { Box, Button, Input, FormControl, FormLabel } from \"@chakra-ui/react\";\n\nconst LoginForm = () => {\n    const dispatch = useDispatch();\n\n    const handleLogin = (e) => {\n        e.preventDefault();\n        const { email, password } = e.target;\n        dispatch(login({ email: email.value, password: password.value }));\n        email.value = \"\";\n        password.value = \"\";\n    };\n\n    return (\n        <Box maxW=\"400px\" mx=\"auto\">\n            <form onSubmit={handleLogin}>\n                <FormControl id=\"email\" mb={4}>\n                    <FormLabel>Email</FormLabel>\n                    <Input type=\"email\" name=\"email\" />\n                </FormControl>\n                <FormControl id=\"password\" mb={4}>\n                    <FormLabel>Password</FormLabel>\n                    <Input type=\"password\" name=\"password\" autoComplete=\"off\" />\n                </FormControl>\n                <Button\n                    type=\"submit\"\n                    colorScheme=\"blue\"\n                    size=\"lg\"\n                    w=\"100%\"\n                    borderRadius=\"md\"\n                    p=\"2\"\n                    _hover={{\n                        bgGradient: 'linear(to-r, red.500, yellow.500)',\n                    }}\n                    bgGradient=\"linear(to-r, blue.500, orange.500)\"\n                >\n                    Login\n                </Button>\n            </form>\n        </Box>\n    );\n};\n\nexport default LoginForm;\n","import LoginForm from \"components/LoginForm/LoginForm\";\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { Flex, Box, Heading, Text, Link as ChakraLink } from '@chakra-ui/react';\n\nimport { Link as ReactRouterLink } from 'react-router-dom';\n\nexport default function LoginPage() {\n    return (\n        <HelmetProvider>\n            <Helmet>\n                <title>Login</title>\n                <meta name=\"description\" content=\"Login\" />\n            </Helmet>\n            <Flex minHeight=\"100vh\" alignItems=\"center\" justifyContent=\"center\" mt={-32}>\n                <Box p={8} borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\" bg=\"white\">\n                    <Heading as=\"h1\" size=\"lg\" textAlign=\"center\" mb={8}>\n                    Login\n                    </Heading>\n                    <LoginForm />\n                    <Text mt={4} textAlign=\"center\">\n                    Don't have an account?{' '}\n                    <ChakraLink as={ReactRouterLink} to=\"/register\" textDecoration=\"underline\" color=\"blue.500\">\n                        Register\n                    </ChakraLink>\n                    </Text>\n                </Box>\n            </Flex>\n        </HelmetProvider>\n    );\n}","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactNode\n   */\n  requiredIndicator?: React.ReactNode\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],"names":["dispatch","useDispatch","_jsx","Box","maxW","mx","children","_jsxs","onSubmit","e","preventDefault","_e$target","target","email","password","login","value","FormControl","id","mb","FormLabel","Input","type","name","autoComplete","Button","colorScheme","size","w","borderRadius","p","_hover","bgGradient","LoginPage","HelmetProvider","Helmet","content","Flex","minHeight","alignItems","justifyContent","mt","borderWidth","overflow","bg","Heading","as","textAlign","LoginForm","Text","ChakraLink","ReactRouterLink","to","textDecoration","color","createContext","errorMessage","_createContext2","FormControlStylesProvider","useFormControlStyles","strict","_createContext4","FormControlProvider","useFormControlContext","forwardRef","props","ref","styles","useMultiStyleConfig","idProp","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","useId","labelId","feedbackId","helpTextId","useState","_useState2","hasFeedbackText","setHasFeedbackText","_useState4","hasHelpText","setHasHelpText","_useState6","isFocused","setFocus","getHelpTextProps","useCallback","forwardedRef","mergeRefs","node","getLabelProps","dataAttr","htmlFor","getErrorMessageProps","getRootProps","role","getRequiredIndicatorProps","onFocus","onBlur","useFormControlProvider","omitThemingProps","context","_","className","cx","chakra","div","__css","displayName","field","helperText","passedProps","useStyleConfig","_props$requiredIndica","requiredIndicator","RequiredIndicator","_props$optionalIndica","optionalIndicator","rest","ownProps","_a","label","display","span","useFormControl","disabled","readOnly","required","labelIds","push","join","_b","_c","callAllHandlers","useFormControlProps","ariaAttr","htmlSize","input","_className"],"sourceRoot":""}